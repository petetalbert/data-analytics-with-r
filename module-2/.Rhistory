source('C:/Users/talb3241/OneDrive - University of St. Thomas/R CAPE Course/data-analytics-with-r/module-2/first-r-script.R', echo=TRUE)
sort(office_ratings, desc(imdb_ratings))
sort(office_ratings, desc(imdb_rating))
arrange(office_ratings, desc(imdb_rating))
filter(office_ratings, imdb_rating > 8.0)
print(1)
print(1)
arrange(office_ratings, desc(imdb_rating))
?filter
starwars
filter(starwars, species == "Human")
office_ratings
ggplot(data = office_ratings, mapping = aes(x = season)) geom_bar()
ggplot(data = office_ratings, mapping = aes(x = season)) + geom_bar()
ggplot(data = office_ratings, mapping = aes(x = episode)) + geom_bar() + facet_wrap(~season)
ggplot(data = office_ratings, mapping = aes(x = season)) + geom_bar()
ggplot(data = office_ratings, mapping = aes(x = season)) +
geom_bar() +
theme_minimal()
ggplot(data = office_ratings, mapping = aes(x = season, fill = imdb_rating)) +
geom_bar() +
theme_minimal()
ggplot(data = office_ratings, mapping = aes(x = season)) +
geom_bar(aes(fill = imdb_rating)) +
theme_minimal()
summarize(group_by(office_ratings, season),
avg_total_votes = mean(total_votes))
office_ratings_grouped <- group_by(office_ratings, season)
summarize(office_ratings_grouped, avg_total_votes = mean(total_votes))
office_ratings_summary <- summarize(office_ratings_grouped, avg_total_votes = mean(total_votes))
ggplot(data = office_ratings_summary, mapping = aes(x = season, y = avg_total_votes)) +
geom_bar(aes(fill = imdb_rating)) +
theme_minimal()
ggplot(data = office_ratings_summary, mapping = aes(x = season, y = avg_total_votes)) +
geom_bar() +
theme_minimal()
ggplot(data = office_ratings_summary, mapping = aes(x = season, y = avg_total_votes)) +
geom_col() +
theme_minimal()
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col() +
theme_minimal()
office_ratings_grouped
# okay lot's of fancy tinkering to get the plot looking professional.
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col() +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "season",
y = "Avg total votes"
)
# okay lot's of fancy tinkering to get the plot looking professional.
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col() +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank())
# okay lot's of fancy tinkering to get the plot looking professional.
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col() +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
# okay lot's of fancy tinkering to get the plot looking professional.
library(scales)
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col() +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col() +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "Season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col(fill = "Dark purple") +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "Season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col(fill = "Purple") +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "Season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col(fill = "Purple", alpha = 0.5) +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "Season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col(fill = "Purple", alpha = 0.8) +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "Season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col(fill = "maroon", alpha = 0.8) +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "Season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col(fill = "maroon") +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "Season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col(fill = "slategray") +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "Season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col(fill = "slategray") +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes\non average as the show went along",
subtitle = "Average total votes per season of The Office",
x = "Season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
ggplot(data = office_ratings_summary, mapping = aes(x = as.character(season), y = avg_total_votes)) +
geom_col(fill = "slategray") +
scale_y_continuous(labels = comma_format(accuracy = 1)) +
theme_minimal() +
labs(
title = "The Office received less total IMDB votes on average\nas the show went along",
subtitle = "Average total votes per season of The Office",
x = "Season",
y = "Avg total votes"
) +
theme(panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank())
# easiest group summary is just a count.
count(office_ratings, season)
library(tidyverse)
office_ratings <- read_csv("office_ratings.csv")
office_ratings
arrange(office_ratings, desc(imdb_rating))
filter(office_ratings, imdb_rating > 8.0)
# easiest group summary is just a count.
count(office_ratings, season)
office_ratings_grouped <- group_by(office_ratings, season)
summarize(office_ratings_grouped, avg_total_votes = mean(total_votes))
arrange(.data = office_ratings, ... = imdb_rating)
?arrange
?filter
?mean
filter(office_ratings, imdb_rating > 8.0)
filter(office_ratings, imdb_rating > 8.5)
filter(office_ratings, imdb_rating > 9)
filter(office_ratings, imdb_rating > 9.3)
filter(office_ratings, imdb_rating > 9.2)
filter(office_ratings, imdb_rating > 9.3)
# Load packages -----------------------------------------------------------
# In your R scripts, you always want to first load any packages you plan on using. Again, using
# library() basically loads the package so you can use the functions it contains.
library(tidyverse)
# Let's load in some data! ------------------------------------------------
# To work with data in R, we need it in a spreadsheet-like format. In R, this is called a data frame. The function
# read_csv() takes a .csv file (essentially a spreadsheet data file) loads it into our environment as
# a data.frame.
office_ratings <- read_csv("office_ratings.csv")
office_ratings
# Quick note about functions. ---------------------------------------------
x <- c(2, 5, 8, 9.1, NA)
mean(x)
mean(x, na.rm = TRUE)
x <- c(2, 5, 8, 9, NA)
mean(x)
mean(x, na.rm = TRUE)
# Remember: many functions have optional arguments. You can have count sort the rows from greatest to least with sort = TRUE.
count(office_ratings, season, sort = TRUE)
